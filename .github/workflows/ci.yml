# This starter workflow is for a CMake project running on multiple platforms.
# There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: SecureStorage Build on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Existing trigger for actual releases
  create: # This is effectively the same as `on: { push: { tags: [ 'v*' ] } }` for triggering on new tags
    tags:
      - 'v*' # Trigger actual release for tags like v1.0.0
  # New manual trigger for testing release steps
  workflow_dispatch:
    inputs:
      test_tag_name:
        description: 'Simulate a tag name for testing (e.g., v1.0.0-test). If empty, a default test tag will be used.'
        required: false
        type: string
      is_production_release_run:
        description: 'DANGER: If true, this manual run will attempt a full production release. Default is false (test/dry-run mode).'
        required: true
        default: 'false' # Important: default to false for safety
        type: boolean

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] # Added macos-latest
        build_type: [Release]
        c_compiler: [gcc, clang, cl] # cl for windows, gcc/clang for linux/macos
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest # Added macOS configuration
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          # Exclude gcc for macos as clang is standard; cl is windows only
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl


    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

    - name: Install project
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix ${{ github.workspace }}/build/install

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: ${{ github.workspace }}/build/install/

  build-docs:
    name: Build Doxygen Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install Doxygen and Graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }} -DCMAKE_BUILD_TYPE=Release

      - name: Build Doxygen target
        run: cmake --build ${{ github.workspace }}/build --target doxygen

      - name: Upload Doxygen HTML
        uses: actions/upload-artifact@v4
        with:
          name: doxygen-html-docs
          path: ${{ github.workspace }}/build/docs/html/

  release:
    name: Create Release and Upload Assets
    if: (github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    needs: [build, build-docs]
    runs-on: ubuntu-latest # Using ubuntu for packaging consistency, tools like tar/zip are common
    permissions:
      contents: write
    outputs:
      release_tag: ${{ env.RELEASE_TAG }}
      is_dry_run: ${{ env.IS_DRY_RUN }}
      upload_url: ${{ steps.create_github_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Set up MSYS2 (for zip on Linux runner, if needed for Windows packages)
        if: runner.os == 'Linux'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: zip

      # Download all build artifacts
      - name: Download Linux GCC Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-ubuntu-latest-gcc-Release
          path: build-artifacts/linux-gcc

      - name: Download Linux Clang Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-ubuntu-latest-clang-Release
          path: build-artifacts/linux-clang

      - name: Download Windows MSVC Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-windows-latest-cl-Release
          path: build-artifacts/windows-msvc

      - name: Download macOS Clang Build Artifact  # New step for macOS
        uses: actions/download-artifact@v4
        with:
          name: build-macos-latest-clang-Release # Ensure this matches the uploaded artifact name
          path: build-artifacts/macos-clang

      - name: Download Doxygen HTML Docs
        uses: actions/download-artifact@v4
        with:
          name: doxygen-html-docs
          path: doxygen-docs

      - name: Determine Release Tag and Dry Run Status
        id: release_vars
        shell: bash
        run: |
          IS_DRY_RUN_VALUE="true"
          TAG_NAME=""

          if [ "${{ github.event_name }}" == "create" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG_NAME="${{ github.ref_name }}"
            IS_DRY_RUN_VALUE="false" 
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.test_tag_name }}"
            if [ -z "$TAG_NAME" ]; then
              TAG_NAME="v0.0.0-testdispatch-$(date +%s)"
            fi
            if [ "${{ github.event.inputs.is_production_release_run }}" == "true" ]; then
              IS_DRY_RUN_VALUE="false"
            else
              IS_DRY_RUN_VALUE="true"
            fi
          else
            TAG_NAME="v0.0.0-snapshot-$(date +%s)"
            echo "Warning: Release job triggered by unexpected event: ${{ github.event_name }}"
          fi
          
          echo "Determined tag: $TAG_NAME"
          echo "Is dry run? $IS_DRY_RUN_VALUE"
          echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV
          echo "IS_DRY_RUN=$IS_DRY_RUN_VALUE" >> $GITHUB_ENV

      - name: Create Release Packages
        shell: bash
        run: |
          echo "Packaging for tag: ${{ env.RELEASE_TAG }}"
          mkdir -p release_assets

          # Package Doxygen docs
          zip -r release_assets/SecureStorage-docs-${{ env.RELEASE_TAG }}.zip doxygen-docs/
          echo "Packaged Doxygen documentation."

          # Package Linux GCC build
          if [ -d "build-artifacts/linux-gcc" ] && [ "$(ls -A build-artifacts/linux-gcc)" ]; then
            tar -czvf release_assets/SecureStorage-linux-gcc-${{ env.RELEASE_TAG }}.tar.gz -C build-artifacts/linux-gcc .
            echo "Packaged Linux GCC build."
          else
            echo "Warning: Linux GCC build artifact not found or is empty in build-artifacts/linux-gcc/."
          fi

          # Package Linux Clang build
          if [ -d "build-artifacts/linux-clang" ] && [ "$(ls -A build-artifacts/linux-clang)" ]; then
            tar -czvf release_assets/SecureStorage-linux-clang-${{ env.RELEASE_TAG }}.tar.gz -C build-artifacts/linux-clang .
            echo "Packaged Linux Clang build."
          else
            echo "Warning: Linux Clang build artifact not found or is empty in build-artifacts/linux-clang/."
          fi

          # Package Windows MSVC build
          if [ -d "build-artifacts/windows-msvc" ] && [ "$(ls -A build-artifacts/windows-msvc)" ]; then
            (cd build-artifacts/windows-msvc && zip -r ../../release_assets/SecureStorage-windows-msvc-${{ env.RELEASE_TAG }}.zip .)
            echo "Packaged Windows MSVC build."
          else
            echo "Warning: Windows MSVC build artifact not found or is empty in build-artifacts/windows-msvc/."
          fi

          # Package macOS Clang build (New)
          if [ -d "build-artifacts/macos-clang" ] && [ "$(ls -A build-artifacts/macos-clang)" ]; then
            tar -czvf release_assets/SecureStorage-macos-clang-${{ env.RELEASE_TAG }}.tar.gz -C build-artifacts/macos-clang .
            echo "Packaged macOS Clang build."
          else
            echo "Warning: macOS Clang build artifact not found or is empty in build-artifacts/macos-clang/."
          fi

          echo "--- Contents of release_assets ---"
          ls -R release_assets
          echo "--- End of release_assets ---"


      - name: Upload Packaged Artifacts (for Test/Dry Run)
        if: env.IS_DRY_RUN == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-release-packages-${{ env.RELEASE_TAG }}
          path: ./release_assets/*

      - name: Create GitHub Release (Production Run Only)
        if: env.IS_DRY_RUN == 'false' && startsWith(env.RELEASE_TAG, 'v')
        id: create_github_release 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          body: |
            Release of version ${{ env.RELEASE_TAG }}.
            Please find the attached assets for different platforms and the API documentation.
          draft: false
          prerelease: ${{ contains(env.RELEASE_TAG, '-beta') || contains(env.RELEASE_TAG, '-rc') || contains(env.RELEASE_TAG, '-alpha') || contains(env.RELEASE_TAG, '-test') }}

      - name: Upload Release Assets (Production Run Only)
        if: env.IS_DRY_RUN == 'false' && steps.create_github_release.outputs.upload_url
        shell: bash
        run: |
          for asset_path in ./release_assets/*; do
            if [ -f "$asset_path" ]; then
              asset_name=$(basename "$asset_path")
              echo "Uploading $asset_name..."
              gh release upload ${{ env.RELEASE_TAG }} "$asset_path" --clobber
            else
              echo "Skipping $asset_path, not a file."
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}

      - name: Log Final Release Mode
        shell: bash
        run: |
          echo "Job triggered by: ${{ github.event_name }}"
          echo "Tag for this run: ${{ env.RELEASE_TAG }}"
          echo "Is this a dry/test run? ${{ env.IS_DRY_RUN }}"
          if [[ "${{ env.IS_DRY_RUN }}" == "false" && "${{ steps.create_github_release.outputs.upload_url }}" != "" ]]; then
            echo "A production GitHub Release was created/attempted: ${{ steps.create_github_release.outputs.html_url }}"
          elif [[ "${{ env.IS_DRY_RUN }}" == "true" ]]; then
            echo "This was a test run. Packaged artifacts were uploaded as workflow artifacts (if successful)."
          else
            echo "This was not a production release run (either dry run or create_github_release step was skipped)."
          fi
