name: SecureStorage Build on multiple platforms

on:
  push:
    branches: 
      - '*' # Trigger on pushes to all branches
    tags:
      - 'v*' # Trigger release job on version tags
  pull_request:
    branches:
      - '*' # Trigger on pull requests to all branches
  workflow_dispatch: # Allows manual triggering
    inputs:
      test_tag_name:
        description: 'Tag name for test release (e.g., v0.0.0-test). If empty, a default test tag is used.'
        required: false
        default: 'v0.0.0-manual-test'

jobs:
  build: # Linux builds
    name: Build Linux (${{ matrix.c_compiler }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - c_compiler: gcc
            cpp_compiler: g++
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build-linux-${{ matrix.c_compiler }}" >> "$GITHUB_OUTPUT"
        echo "install-output-dir=${{ github.workspace }}/install-linux-${{ matrix.c_compiler }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-output-dir }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Install project
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix ${{ steps.strings.outputs.install-output-dir }}

    - name: Upload Linux build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-linux-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.install-output-dir }}/

  build_android:
    name: Build Android (${{ matrix.config.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "api21-arm64-v8a"
            api_level: 21 # This will be the effective minimum API for system headers with NDK r25c
            abi: "arm64-v8a"
            ndk_version_package: "ndk;25.2.9519653" # NDK r25c
            ndk_folder_name: "25.2.9519653"        
            cpp_stl: "c++_shared"
          - name: "api18-armeabi-v7a"
            api_level: 18 # NDK r25c will use its min (19) for headers, but can target 18 for manifest/compatibility
            abi: "armeabi-v7a"
            ndk_version_package: "ndk;25.2.9519653" # Use the same NDK r25c
            ndk_folder_name: "25.2.9519653"       
            cpp_stl: "c++_shared" 
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build-android-${{ matrix.config.name }}" >> "$GITHUB_OUTPUT"
        echo "install-output-dir=${{ github.workspace }}/install-android-${{ matrix.config.name }}" >> "$GITHUB_OUTPUT"

    - name: Setup Android SDK & NDK
      id: setup_ndk 
      uses: android-actions/setup-android@v3
      with:
        packages: "${{ matrix.config.ndk_version_package }}" 

    - name: Configure CMake for Android
      shell: bash
      env:
        ANDROID_SDK_ROOT_ENV: ${{ env.ANDROID_SDK_ROOT }} 
      run: |
        EXPECTED_NDK_FOLDER_NAME="${{ matrix.config.ndk_folder_name }}"
        EFFECTIVE_NDK_HOME="$ANDROID_SDK_ROOT_ENV/ndk/$EXPECTED_NDK_FOLDER_NAME"

        echo "DEBUG: Matrix NDK folder name: $EXPECTED_NDK_FOLDER_NAME"
        echo "DEBUG: ANDROID_SDK_ROOT_ENV used: $ANDROID_SDK_ROOT_ENV"
        echo "Constructed NDK path: $EFFECTIVE_NDK_HOME"
        
        if [ -z "$ANDROID_SDK_ROOT_ENV" ]; then
            echo "Error: ANDROID_SDK_ROOT_ENV is not set. Android SDK setup likely failed."
            exit 1
        fi
        if [ ! -d "$EFFECTIVE_NDK_HOME" ]; then
          echo "Error: Constructed NDK path does not exist: '$EFFECTIVE_NDK_HOME'"
          echo "Listing $ANDROID_SDK_ROOT_ENV/ndk/ to see available NDKs (if any):"
          ls -la "$ANDROID_SDK_ROOT_ENV/ndk/" || echo "NDK directory $ANDROID_SDK_ROOT_ENV/ndk/ not found or ls failed."
          exit 1
        fi
        
        if [ ! -f "$EFFECTIVE_NDK_HOME/source.properties" ]; then
          echo "Error: Android NDK at $EFFECTIVE_NDK_HOME does not appear valid (missing source.properties)."
          echo "Listing contents of $EFFECTIVE_NDK_HOME:"
          ls -la "$EFFECTIVE_NDK_HOME"
          exit 1
        fi

        echo "Final NDK path for CMake: $EFFECTIVE_NDK_HOME"
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-output-dir }} \
          -DCMAKE_TOOLCHAIN_FILE=$EFFECTIVE_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.config.abi }} \
          -DANDROID_PLATFORM=android-${{ matrix.config.api_level }} \
          -DANDROID_NDK=$EFFECTIVE_NDK_HOME \
          -DANDROID_STL=${{ matrix.config.cpp_stl }} \
          -S ${{ github.workspace }}

    - name: Build Android
      shell: bash
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Install Android project
      shell: bash
      run: |
        cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix ${{ steps.strings.outputs.install-output-dir }}

    - name: Upload Android build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-android-${{ matrix.config.name }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.install-output-dir }}/
  
  build-docs:
    name: Build Doxygen Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0 

      - name: Install Doxygen and Graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build-docs -S ${{ github.workspace }} -DCMAKE_BUILD_TYPE=Release

      - name: Build Doxygen target
        run: cmake --build ${{ github.workspace }}/build-docs --target doxygen

      - name: Upload Doxygen HTML
        uses: actions/upload-artifact@v4
        with:
          name: doxygen-html-docs
          path: ${{ github.workspace }}/build-docs/docs/html/

  release:
    name: Create Release and Upload Assets
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    needs: [build, build_android, build-docs]
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0 

      - name: Set up MSYS2 (for zip, tar on Linux runner)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: zip tar gh 

      - name: Download Linux GCC Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-linux-gcc-Release
          path: build-artifacts/linux-gcc-Release
      - name: Download Linux Clang Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-linux-clang-Release
          path: build-artifacts/linux-clang-Release
      - name: Download Android API21 arm64-v8a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-android-api21-arm64-v8a-Release
          path: build-artifacts/android-api21-arm64-v8a-Release
      - name: Download Android API18 armeabi-v7a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-android-api18-armeabi-v7a-Release 
          path: build-artifacts/android-api18-armeabi-v7a-Release
      - name: Download Doxygen HTML Docs
        uses: actions/download-artifact@v4
        with:
          name: doxygen-html-docs
          path: doxygen-docs

      - name: Determine Version and Release Settings
        id: version_settings
        shell: bash
        run: |
          IS_MANUAL_DISPATCH="${{ github.event_name == 'workflow_dispatch' }}"
          echo "IS_MANUAL_DISPATCH: $IS_MANUAL_DISPATCH"

          if [[ "$IS_MANUAL_DISPATCH" == "true" ]]; then
            VERSION_NAME="${{ github.event.inputs.test_tag_name }}"
            if [[ -z "$VERSION_NAME" ]]; then
              VERSION_NAME="v0.0.0-manual-test-$(date +%Y%m%d%H%M%S)"
            fi
            DRAFT_RELEASE="true"
            PRERELEASE_FLAG="true" 
            RELEASE_NAME_PREFIX="Test Release: "
            echo "Manual dispatch detected. Using test version: $VERSION_NAME"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION_NAME="${{ github.ref_name }}"
            DRAFT_RELEASE="false"
            PRERELEASE_FLAG="false" 
            if [[ "$VERSION_NAME" == *-alpha* || "$VERSION_NAME" == *-beta* || "$VERSION_NAME" == *-rc* ]]; then
              PRERELEASE_FLAG="true"
            fi
            RELEASE_NAME_PREFIX="Release: "
            echo "Tag push detected. Using version: $VERSION_NAME"
          else
            echo "ERROR: Not a 'v*' tag push or manual dispatch. This job should not have run under these conditions."
            exit 1 
          fi
          echo "VERSION_NAME=$VERSION_NAME" >> "$GITHUB_ENV"
          echo "DRAFT_RELEASE=$DRAFT_RELEASE" >> "$GITHUB_ENV"
          echo "PRERELEASE_FLAG=$PRERELEASE_FLAG" >> "$GITHUB_ENV"
          echo "FINAL_RELEASE_NAME=${RELEASE_NAME_PREFIX}${VERSION_NAME}" >> "$GITHUB_ENV"

      - name: Create Release Packages
        shell: bash
        env:
          VERSION_NAME: ${{ env.VERSION_NAME }}
        run: |
          mkdir -p release_assets
          VERSION_TAG_FOR_FILE=$(echo "$VERSION_NAME" | sed 's/[^a-zA-Z0-9._-]/_/g')
          echo "Packaging for version: $VERSION_NAME (Filename suffix: $VERSION_TAG_FOR_FILE)"

          if [ -d "doxygen-docs" ] && [ "$(ls -A doxygen-docs)" ]; then
            zip -r release_assets/SecureStorage-docs-${VERSION_TAG_FOR_FILE}.zip doxygen-docs/
            echo "Packaged Doxygen documentation."
          else echo "Doxygen docs not found or empty."; fi

          if [ -d "build-artifacts/linux-gcc-Release" ] && [ "$(ls -A build-artifacts/linux-gcc-Release)" ]; then
            tar -czvf release_assets/SecureStorage-linux-gcc-${VERSION_TAG_FOR_FILE}.tar.gz -C build-artifacts/linux-gcc-Release .
            echo "Packaged Linux GCC build."
          else echo "Linux GCC build artifact not found or is empty."; fi

          if [ -d "build-artifacts/linux-clang-Release" ] && [ "$(ls -A build-artifacts/linux-clang-Release)" ]; then
            tar -czvf release_assets/SecureStorage-linux-clang-${VERSION_TAG_FOR_FILE}.tar.gz -C build-artifacts/linux-clang-Release .
            echo "Packaged Linux Clang build."
          else echo "Linux Clang build artifact not found or is empty."; fi
          
          if [ -d "build-artifacts/android-api21-arm64-v8a-Release" ] && \
             [ "$(ls -A build-artifacts/android-api21-arm64-v8a-Release)" ]; then
            tar -czvf release_assets/SecureStorage-android-api21-arm64-v8a-${VERSION_TAG_FOR_FILE}.tar.gz -C build-artifacts/android-api21-arm64-v8a-Release .
            echo "Packaged Android API21 arm64-v8a build."
          else echo "Android API21 arm64-v8a build artifact not found or empty."; fi

          if [ -d "build-artifacts/android-api18-armeabi-v7a-Release" ] && \
             [ "$(ls -A build-artifacts/android-api18-armeabi-v7a-Release)" ]; then
            tar -czvf release_assets/SecureStorage-android-api18-armeabi-v7a-${VERSION_TAG_FOR_FILE}.tar.gz -C build-artifacts/android-api18-armeabi-v7a-Release .
            echo "Packaged Android API18 armeabi-v7a build."
          else echo "Android API18 armeabi-v7a build artifact not found or empty."; fi
          
          echo "Listing packaged assets:"
          ls -R release_assets

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_NAME }} 
          release_name: ${{ env.FINAL_RELEASE_NAME }}
          body: |
            Automated release for version ${{ env.VERSION_NAME }}.
            This is a ${{ env.DRAFT_RELEASE == 'true' && 'DRAFT' || 'FINAL' }} release.
            Prerelease status: ${{ env.PRERELEASE_FLAG }}.
            Please find the attached assets for different platforms and the API documentation.
          draft: ${{ env.DRAFT_RELEASE }}
          prerelease: ${{ env.PRERELEASE_FLAG }}

      - name: Upload Release Assets (using gh cli)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_NAME: ${{ env.VERSION_NAME }}
        run: |
          echo "Target release tag for asset upload: $VERSION_NAME"
          if [ -z "${{ steps.create_release.outputs.upload_url }}" ]; then
            echo "Upload URL from create-release step is empty. Will rely on gh release upload to find tag $VERSION_NAME."
          fi

          ASSET_COUNT=0
          if [ -d "./release_assets" ] && [ "$(ls -A ./release_assets)" ]; then
            for asset_path in ./release_assets/*; do
              if [ -f "$asset_path" ]; then
                asset_name=$(basename "$asset_path")
                echo "Uploading $asset_name to release tag $VERSION_NAME..."
                gh release upload "$VERSION_NAME" "$asset_path" --clobber
                ASSET_COUNT=$((ASSET_COUNT + 1))
              fi
            done
          fi

          if [ "$ASSET_COUNT" -eq 0 ]; then
            echo "No assets found in ./release_assets/ to upload."
          else
            echo "Uploaded $ASSET_COUNT assets to release $VERSION_NAME."
          fi